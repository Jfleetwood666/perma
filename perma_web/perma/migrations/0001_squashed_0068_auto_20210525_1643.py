# Generated by Django 2.2.23 on 2021-06-02 23:50

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
# django-mptt removed on 5/21/2024
# import mptt.fields
import simple_history.models
import taggit.managers


class Migration(migrations.Migration):

    replaces = [('perma', '0001_initial'), ('perma', '0002_auto_20160408_1603'), ('perma', '0003_capturejob'), ('perma', '0004_auto_20160506_1632'), ('perma', '0005_auto_20160513_2006'), ('perma', '0006_add_internetarchive_status'), ('perma', '0007_auto_20160527_1625'), ('perma', '0008_auto_20160602_1911'), ('perma', '0009_auto_20160602_1937'), ('perma', '0010_rename_member_to_user'), ('perma', '0010_fix_weekstats'), ('perma', '0011_merge'), ('perma', '0012_auto_20160728_1553'), ('perma', '0013_auto_20160829_2012'), ('perma', '0014_auto_20160916_1953'), ('perma', '0015_auto_20160929_1920'), ('perma', '0016_auto_20161004_2215'), ('perma', '0017_rename_mylinks_to_personallinks'), ('perma', '0018_auto_20161130_1638'), ('perma', '0019_auto_20170224_1628'), ('perma', '0020_auto_20170301_1614'), ('perma', '0021_add_link_description'), ('perma', '0022_auto_20170320_2050'), ('perma', '0023_apikey'), ('perma', '0024_auto_20170602_1851'), ('perma', '0025_auto_20171012_1830'), ('perma', '0026_auto_20171013_1624'), ('perma', '0027_auto_20171116_2220'), ('perma', '0028_auto_20171208_1657'), ('perma', '0029_auto_20180320_1812'), ('perma', '0030_auto_20180430_1438'), ('perma', '0031_auto_20180501_2130'), ('perma', '0032_capturejob_created_by'), ('perma', '0033_auto_20180626_1639'), ('perma', '0034_auto_20180625_2258'), ('perma', '0035_auto_20180824_1828'), ('perma', '0036_auto_20180827_1623'), ('perma', '0037_auto_20181004_1709'), ('perma', '0038_auto_20181206_2141'), ('perma', '0039_users_to_tiers'), ('perma', '0040_auto_20181210_2101'), ('perma', '0041_auto_20190109_1704'), ('perma', '0042_handle_trials'), ('perma', '0043_auto_20190123_1846'), ('perma', '0044_auto_20190219_1744'), ('perma', '0045_auto_20190415_1556'), ('perma', '0046_delete_cdxline'), ('perma', '0047_auto_20200204_1735'), ('perma', '0048_auto_20200218_2033'), ('perma', '0049_auto_20200218_2036'), ('perma', '0050_auto_20200220_2057'), ('perma', '0051_auto_20200220_2058'), ('perma', '0052_auto_20200224_1949'), ('perma', '0053_auto_20200226_1631'), ('perma', '0054_auto_20200304_1547'), ('perma', '0055_auto_20200304_1550'), ('perma', '0056_auto_20200305_1750'), ('perma', '0057_auto_20200504_1551'), ('perma', '0058_auto_20200511_2032'), ('perma', '0059_auto_20200513_1925'), ('perma', '0060_auto_20200618_1706'), ('perma', '0061_auto_20200618_1803'), ('perma', '0062_auto_20201007_1629'), ('perma', '0063_auto_20201008_1907'), ('perma', '0064_folder_cached_path'), ('perma', '0065_auto_20210520_1458'), ('perma', '0066_auto_20210520_1650'), ('perma', '0067_auto_20210521_0000'), ('perma', '0068_auto_20210525_1643')]

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Registrar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=400)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(max_length=500)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('show_partner_status', models.BooleanField(default=False, help_text='Whether to show this registrar in our list of partners.')),
                ('partner_display_name', models.CharField(blank=True, help_text="Optional. Use this to override 'name' for the partner list.", max_length=400, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='registrar_logos')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('link_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('approved', 'approved'), ('denied', 'denied')], default='pending', max_length=20)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('cached_subscription_status', models.CharField(blank=True, help_text="The last known status of customer's paid subscription, from Perma Payments", max_length=50, null=True)),
                ('base_rate', models.DecimalField(decimal_places=2, default=Decimal('100.00'), help_text='Base rate for calculating subscription cost.', max_digits=19)),
                ('nonpaying', models.BooleanField(default=True, help_text='Whether this customer qualifies for a free account.')),
                ('cached_paid_through', models.DateTimeField(blank=True, null=True)),
                ('link_limit', models.IntegerField(default=10)),
                ('link_limit_period', models.CharField(choices=[('once', 'once'), ('monthly', 'monthly'), ('annually', 'annually')], default='once', max_length=8)),
                ('unlimited', models.BooleanField(default=True, help_text='If unlimited, link_limit and related fields are ignored.')),
                ('cached_subscription_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Local record of what the customer last paid.', max_digits=19, null=True)),
                ('in_trial', models.BooleanField(default=True, help_text='Is this customer in their trial period?')),
                ('cached_subscription_started', models.DateTimeField(blank=True, help_text="Used to help calculate how many links have been created against a paying customer's link limit.", null=True)),
                ('orgs_private_by_default', models.BooleanField(default=False, help_text='Whether new orgs created for this registrar default to private links.')),
                ('bonus_links', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_deleted', models.BooleanField(default=False, verbose_name='Deleted by user')),
                ('user_deleted_timestamp', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=400)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('default_to_private', models.BooleanField(default=False)),
                ('registrar', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='perma.Registrar')),
                ('link_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LinkUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email address already exists.'}, max_length=255, unique=True, verbose_name='email address')),
                ('pending_registrar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pending_users', to='perma.Registrar')),
                ('is_active', models.BooleanField(default=False)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('first_name', models.CharField(blank=True, max_length=45)),
                ('last_name', models.CharField(blank=True, max_length=45)),
                ('requested_account_type', models.CharField(blank=True, max_length=45, null=True)),
                ('requested_account_note', models.CharField(blank=True, max_length=45, null=True)),
                ('organizations', models.ManyToManyField(blank=True, help_text='If set, this user is an org user. This should not be set if registrar is set!<br><br>Note: <b>This list will include deleted orgs of which this user is a member.</b> This is a historical record and deleted org memberships cannot be removed.<br><br>', related_name='users', to='perma.Organization')),
                ('registrar', models.ForeignKey(blank=True, help_text='If set, this user is a registrar user. This should not be set if org is set!', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='perma.Registrar')),
                ('link_count', models.IntegerField(default=0)),
                ('link_limit', models.IntegerField(default=10)),
                ('cached_paid_through', models.DateTimeField(blank=True, null=True)),
                ('cached_subscription_status', models.CharField(blank=True, help_text="The last known status of customer's paid subscription, from Perma Payments", max_length=50, null=True)),
                ('base_rate', models.DecimalField(decimal_places=2, default=Decimal('10.00'), help_text='Base rate for calculating subscription cost.', max_digits=19)),
                ('nonpaying', models.BooleanField(default=False, help_text='Whether this customer qualifies for a free account.')),
                ('link_limit_period', models.CharField(choices=[('once', 'once'), ('monthly', 'monthly'), ('annually', 'annually')], default='once', max_length=8)),
                ('unlimited', models.BooleanField(default=False, help_text='If unlimited, link_limit and related fields are ignored.')),
                ('notes', models.TextField(blank=True)),
                ('cached_subscription_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Local record of what the customer last paid.', max_digits=19, null=True)),
                ('in_trial', models.BooleanField(default=True, help_text='Is this customer in their trial period?')),
                ('cached_subscription_started', models.DateTimeField(blank=True, help_text="Used to help calculate how many links have been created against a paying customer's link limit.", null=True)),
                ('bonus_links', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'User',
            },
        ),
        migrations.CreateModel(
            name='Sponsorship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('active', 'Active: user may create links.'), ('inactive', 'Inactive: user may view, but not create, links.')], default='active', max_length=10, null=True)),
                ('status_changed', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_sponsorships', to=settings.AUTH_USER_MODEL)),
                ('registrar', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sponsorships', to='perma.Registrar')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsorships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='sponsorship',
            constraint=models.UniqueConstraint(fields=('registrar', 'user'), name='unique_sponsorship'),
        ),
        migrations.AddField(
            model_name='linkuser',
            name='sponsoring_registrars',
            field=models.ManyToManyField(blank=True, help_text='If set, this user is sponsored by a registrar. Any user can be sponsored by any registrar.', related_name='sponsored_users', through='perma.Sponsorship', to='perma.Registrar')
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('creation_timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_shared_folder', models.BooleanField(default=False)),
                ('is_root_folder', models.BooleanField(default=False)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='folders_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='folders', to='perma.Organization')),
                ('owned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='folders', to=settings.AUTH_USER_MODEL)),
                # django-mptt removed on 5/21/2024
                # ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='perma.Folder')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='perma.Folder')),
                ('is_sponsored_root_folder', models.BooleanField(default=False)),
                ('read_only', models.BooleanField(default=False)),
                ('sponsored_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sponsored_folders', to='perma.Registrar')),
                ('cached_path', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='organization',
            name='shared_folder',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='top_level_for_org', to='perma.Folder')
        ),
        migrations.AddField(
            model_name='linkuser',
            name='sponsored_root_folder',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sponsored_user', to='perma.Folder')
        ),
        migrations.AddField(
            model_name='linkuser',
            name='root_folder',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='perma.Folder'),
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, db_index=True, default='', max_length=128)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='api_key', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GenericStringTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(db_index=True, max_length=50)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='perma_genericstringtaggeditem_tagged_items', to='contenttypes.ContentType', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='perma_genericstringtaggeditem_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('user_deleted', models.BooleanField(default=False, verbose_name='Deleted by user')),
                ('user_deleted_timestamp', models.DateTimeField(blank=True, null=True)),
                ('guid', models.CharField(editable=False, max_length=255, primary_key=True, serialize=False)),
                ('submitted_url', models.URLField(max_length=2100)),
                ('creation_timestamp', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('submitted_title', models.CharField(max_length=2100)),
                ('notes', models.TextField(blank=True)),
                ('is_private', models.BooleanField(default=False)),
                ('private_reason', models.CharField(blank=True, choices=[('policy', 'Perma-specific robots.txt or meta tag'), ('old_policy', 'Generic robots.txt or meta tag'), ('user', 'At user direction'), ('takedown', 'At request of content owner'), ('failure', 'Analysis of meta tags failed')], max_length=10, null=True)),
                ('is_unlisted', models.BooleanField(default=False)),
                ('archive_timestamp', models.DateTimeField(blank=True, help_text='Date after which this link is eligible to be copied by the mirror network.', null=True)),
                ('thumbnail_status', models.CharField(blank=True, choices=[('generating', 'generating'), ('generated', 'generated'), ('failed', 'failed')], max_length=10, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_links', to=settings.AUTH_USER_MODEL)),
                ('folders', models.ManyToManyField(blank=True, related_name='links', to='perma.Folder')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='perma.Organization')),
                ('warc_size', models.IntegerField(blank=True, null=True)),
                ('internet_archive_upload_status', models.CharField(choices=[('not_started', 'not_started'), ('completed', 'completed'), ('failed', 'failed'), ('deleted', 'deleted'), ('deletion_incomplete', 'deletion_incomplete'), ('deletion_required', 'deletion_required'), ('upload_or_reupload_required', 'upload_or_reupload_required')], db_index=True, default='not_started', max_length=28)),
                ('replacement_link', models.ForeignKey(blank=True, help_text='New link to which readers should be forwarded when trying to view this link.', null=True, on_delete=django.db.models.deletion.CASCADE, to='perma.Link')),
                ('submitted_description', models.CharField(blank=True, max_length=300, null=True)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='perma.GenericStringTaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('submitted_url_surt', models.CharField(blank=True, max_length=2100, null=True)),
                ('cached_can_play_back', models.BooleanField(db_index=True, default=None, help_text='After archive_timestamp, cache whether this link can be played back, for efficiency.', null=True)),
                ('bonus_link', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LinkBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_on', models.DateTimeField(auto_now=True, db_index=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='link_batches', to=settings.AUTH_USER_MODEL)),
                ('target_folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='perma.Folder')),
            ],
            options={
                'verbose_name_plural': 'link batches',
            },
        ),
        migrations.CreateModel(
            name='Capture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('primary', 'primary'), ('screenshot', 'screenshot'), ('favicon', 'favicon')], max_length=10)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('failed', 'failed'), ('success', 'success')], max_length=10)),
                ('url', models.CharField(blank=True, max_length=2100, null=True)),
                ('record_type', models.CharField(choices=[('response', 'WARC Response record -- recorded from web'), ('resource', 'WARC Resource record -- file without web headers')], max_length=10)),
                ('content_type', models.CharField(default='', help_text='HTTP Content-type header.', max_length=255)),
                ('user_upload', models.BooleanField(default=False, help_text='True if the user uploaded this capture.')),
                ('link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='captures', to='perma.Link')),
            ],
        ),
        migrations.CreateModel(
            name='CaptureJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'pending'), ('in_progress', 'in_progress'), ('completed', 'completed'), ('deleted', 'deleted'), ('failed', 'failed'), ('invalid', 'invalid')], db_index=True, default='invalid', max_length=15)),
                ('human', models.BooleanField(default=False)),
                ('attempt', models.SmallIntegerField(default=0)),
                ('step_count', models.FloatField(default=0)),
                ('step_description', models.CharField(blank=True, max_length=255, null=True)),
                ('capture_start_time', models.DateTimeField(blank=True, null=True)),
                ('capture_end_time', models.DateTimeField(blank=True, null=True)),
                ('link', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='capture_job', to='perma.Link')),
                ('order', models.FloatField(db_index=True, default=0)),
                ('submitted_url', models.CharField(blank=True, max_length=2100)),
                ('link_batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='capture_jobs', to='perma.LinkBatch')),
                ('message', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capture_jobs', to=settings.AUTH_USER_MODEL)),
                ('superseded', models.BooleanField(default=False, help_text='A user upload has made this CaptureJob irrelevant to the playback of its related Link')),
            ],
        ),
        migrations.CreateModel(
            name='UncaughtError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_url', models.TextField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('stack', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('resolved', models.BooleanField(default=False)),
                ('resolved_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='errors_resolved', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='errors_triggered', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MinuteStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_timestamp', models.DateTimeField(auto_now_add=True)),
                ('links_sum', models.IntegerField(default=0)),
                ('users_sum', models.IntegerField(default=0)),
                ('organizations_sum', models.IntegerField(default=0)),
                ('registrars_sum', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='WeekStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(null=True)),
                ('links_sum', models.IntegerField(default=0)),
                ('users_sum', models.IntegerField(default=0)),
                ('organizations_sum', models.IntegerField(default=0)),
                ('registrars_sum', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalOrganization',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('user_deleted', models.BooleanField(default=False, verbose_name='Deleted by user')),
                ('user_deleted_timestamp', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=400)),
                ('date_created', models.DateTimeField(blank=True, editable=False, null=True)),
                ('default_to_private', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registrar', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='perma.Registrar')),
                ('shared_folder', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='perma.Folder')),
                ('link_count', models.IntegerField(default=0)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical organization',
            },
        ),
        migrations.CreateModel(
            name='HistoricalLinkUser',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email address already exists.'}, max_length=255, verbose_name='email address')),
                ('pending_registrar', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='perma.Registrar')),
                ('is_active', models.BooleanField(default=False)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(blank=True, editable=False)),
                ('first_name', models.CharField(blank=True, max_length=45)),
                ('last_name', models.CharField(blank=True, max_length=45)),
                ('requested_account_type', models.CharField(blank=True, max_length=45, null=True)),
                ('requested_account_note', models.CharField(blank=True, max_length=45, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registrar', models.ForeignKey(blank=True, db_constraint=False, help_text='If set, this user is a registrar user. This should not be set if org is set!', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='perma.Registrar')),
                ('root_folder', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='perma.Folder')),
                ('link_count', models.IntegerField(default=0)),
                ('link_limit', models.IntegerField(default=10)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('notes', models.TextField(blank=True)),
                ('cached_paid_through', models.DateTimeField(blank=True, null=True)),
                ('cached_subscription_status', models.CharField(blank=True, help_text="The last known status of customer's paid subscription, from Perma Payments", max_length=50, null=True)),
                ('base_rate', models.DecimalField(decimal_places=2, default=Decimal('10.00'), help_text='Base rate for calculating subscription cost.', max_digits=19)),
                ('nonpaying', models.BooleanField(default=False, help_text='Whether this customer qualifies for a free account.')),
                ('link_limit_period', models.CharField(choices=[('once', 'once'), ('monthly', 'monthly'), ('annually', 'annually')], default='once', max_length=8)),
                ('unlimited', models.BooleanField(default=False, help_text='If unlimited, link_limit and related fields are ignored.')),
                ('cached_subscription_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Local record of what the customer last paid.', max_digits=19, null=True)),
                ('in_trial', models.BooleanField(default=True, help_text='Is this customer in their trial period?')),
                ('cached_subscription_started', models.DateTimeField(blank=True, help_text="Used to help calculate how many links have been created against a paying customer's link limit.", null=True)),
                ('sponsored_root_folder', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='perma.Folder')),
                ('bonus_links', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical User',
            },
        ),
        migrations.CreateModel(
            name='HistoricalRegistrar',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=400)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(max_length=500)),
                ('date_created', models.DateTimeField(blank=True, editable=False, null=True)),
                ('show_partner_status', models.BooleanField(default=False, help_text='Whether to show this registrar in our list of partners.')),
                ('partner_display_name', models.CharField(blank=True, help_text="Optional. Use this to override 'name' for the partner list.", max_length=400, null=True)),
                ('logo', models.TextField(blank=True, max_length=100, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('link_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('approved', 'approved'), ('denied', 'denied')], default='pending', max_length=20)),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('cached_subscription_status', models.CharField(blank=True, help_text="The last known status of customer's paid subscription, from Perma Payments", max_length=50, null=True)),
                ('base_rate', models.DecimalField(decimal_places=2, default=Decimal('10.00'), help_text='Base rate for calculating subscription cost.', max_digits=19)),
                ('nonpaying', models.BooleanField(default=False, help_text='Whether this customer qualifies for a free account.')),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('cached_paid_through', models.DateTimeField(blank=True, null=True)),
                ('link_limit', models.IntegerField(default=10)),
                ('link_limit_period', models.CharField(choices=[('once', 'once'), ('monthly', 'monthly'), ('annually', 'annually')], default='once', max_length=8)),
                ('unlimited', models.BooleanField(default=False, help_text='If unlimited, link_limit and related fields are ignored.')),
                ('cached_subscription_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Local record of what the customer last paid.', max_digits=19, null=True)),
                ('in_trial', models.BooleanField(default=True, help_text='Is this customer in their trial period?')),
                ('cached_subscription_started', models.DateTimeField(blank=True, help_text="Used to help calculate how many links have been created against a paying customer's link limit.", null=True)),
                ('orgs_private_by_default', models.BooleanField(default=False, help_text='Whether new orgs created for this registrar default to private links.')),
                ('bonus_links', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical registrar',
            },
        ),
        migrations.CreateModel(
            name='HistoricalLink',
            fields=[
                ('user_deleted', models.BooleanField(default=False, verbose_name='Deleted by user')),
                ('user_deleted_timestamp', models.DateTimeField(blank=True, null=True)),
                ('guid', models.CharField(db_index=True, editable=False, max_length=255)),
                ('submitted_url', models.URLField(max_length=2100)),
                ('submitted_url_surt', models.CharField(blank=True, max_length=2100, null=True)),
                ('creation_timestamp', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('submitted_title', models.CharField(max_length=2100)),
                ('submitted_description', models.CharField(blank=True, max_length=300, null=True)),
                ('notes', models.TextField(blank=True)),
                ('bonus_link', models.BooleanField(blank=True, null=True)),
                ('warc_size', models.IntegerField(blank=True, null=True)),
                ('cached_can_play_back', models.BooleanField(db_index=True, default=None, help_text='After archive_timestamp, cache whether this link can be played back, for efficiency.', null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('private_reason', models.CharField(blank=True, choices=[('policy', 'Perma-specific robots.txt or meta tag'), ('old_policy', 'Generic robots.txt or meta tag'), ('user', 'At user direction'), ('takedown', 'At request of content owner'), ('failure', 'Analysis of meta tags failed')], max_length=10, null=True)),
                ('is_unlisted', models.BooleanField(default=False)),
                ('archive_timestamp', models.DateTimeField(blank=True, help_text='Date after which this link is eligible to be copied by the mirror network.', null=True)),
                ('internet_archive_upload_status', models.CharField(choices=[('not_started', 'not_started'), ('completed', 'completed'), ('failed', 'failed'), ('deleted', 'deleted'), ('deletion_incomplete', 'deletion_incomplete'), ('deletion_required', 'deletion_required'), ('upload_or_reupload_required', 'upload_or_reupload_required')], db_index=True, default='not_started', max_length=28)),
                ('thumbnail_status', models.CharField(blank=True, choices=[('generating', 'generating'), ('generated', 'generated'), ('failed', 'failed')], max_length=10, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='perma.Organization')),
                ('replacement_link', models.ForeignKey(blank=True, db_constraint=False, help_text='New link to which readers should be forwarded when trying to view this link.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='perma.Link')),
            ],
            options={
                'verbose_name': 'historical link',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['user_deleted'], name='perma_organ_user_de_440fc3_idx'),
        ),
        migrations.AddIndex(
            model_name='link',
            index=models.Index(fields=['user_deleted', 'is_private', 'is_unlisted', 'cached_can_play_back', 'internet_archive_upload_status'], name='perma_link_user_de_b6e6a5_idx'),
        ),
    ]
